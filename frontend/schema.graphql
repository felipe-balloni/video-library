# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union GenericMorph = Challenge | ComponentVideoVideoFromLibrary | ComponentVideoVideoFromVimeo | ComponentVideoVideoFromYouTube | I18NLocale | Lesson | Subscriber | Teacher | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

union LessonVideoDynamicZone = ComponentVideoVideoFromLibrary | ComponentVideoVideoFromVimeo | ComponentVideoVideoFromYouTube | Error

type Challenge {
    URL: String!
    createdAt: DateTime
    updatedAt: DateTime
}

type ChallengeEntity {
    attributes: Challenge
    id: ID
}

type ChallengeEntityResponse {
    data: ChallengeEntity
}

type ChallengeEntityResponseCollection {
    data: [ChallengeEntity!]!
    meta: ResponseCollectionMeta!
}

type ComponentVideoVideoFromLibrary {
    id: ID!
    media: UploadFileEntityResponse!
    title: String!
}

type ComponentVideoVideoFromVimeo {
    id: ID!
    videoID: String!
}

type ComponentVideoVideoFromYouTube {
    id: ID!
    videoID: String!
}

type Error {
    code: String!
    message: String
}

type I18NLocale {
    code: String
    createdAt: DateTime
    name: String
    updatedAt: DateTime
}

type I18NLocaleEntity {
    attributes: I18NLocale
    id: ID
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

type Lesson {
    Video: [LessonVideoDynamicZone]!
    availableAt: DateTime
    challenge: ChallengeEntityResponse
    createdAt: DateTime
    description: String
    slug: String!
    teacher: TeacherEntityResponse
    title: String!
    type: ENUM_LESSON_TYPE!
    updatedAt: DateTime
}

type LessonEntity {
    attributes: Lesson
    id: ID
}

type LessonEntityResponse {
    data: LessonEntity
}

type LessonEntityResponseCollection {
    data: [LessonEntity!]!
    meta: ResponseCollectionMeta!
}

type LessonRelationResponseCollection {
    data: [LessonEntity!]!
}

type Mutation {
    "Change user password. Confirm with the current password."
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    createChallenge(data: ChallengeInput!): ChallengeEntityResponse
    createLesson(data: LessonInput!): LessonEntityResponse
    createSubscriber(data: SubscriberInput!): SubscriberEntityResponse
    createTeacher(data: TeacherInput!): TeacherEntityResponse
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteChallenge(id: ID!): ChallengeEntityResponse
    deleteLesson(id: ID!): LessonEntityResponse
    deleteSubscriber(id: ID!): SubscriberEntityResponse
    deleteTeacher(id: ID!): TeacherEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    deleteUploadFolder(id: ID!): UploadFolderEntityResponse
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    removeFile(id: ID!): UploadFileEntityResponse
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateChallenge(data: ChallengeInput!, id: ID!): ChallengeEntityResponse
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    updateLesson(data: LessonInput!, id: ID!): LessonEntityResponse
    updateSubscriber(data: SubscriberInput!, id: ID!): SubscriberEntityResponse
    updateTeacher(data: TeacherInput!, id: ID!): TeacherEntityResponse
    updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
    updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    challenge(id: ID): ChallengeEntityResponse
    challenges(filters: ChallengeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ChallengeEntityResponseCollection
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
    lesson(id: ID): LessonEntityResponse
    lessons(filters: LessonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LessonEntityResponseCollection
    me: UsersPermissionsMe
    subscriber(id: ID): SubscriberEntityResponse
    subscribers(filters: SubscriberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SubscriberEntityResponseCollection
    teacher(id: ID): TeacherEntityResponse
    teachers(filters: TeacherFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TeacherEntityResponseCollection
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
    uploadFolder(id: ID): UploadFolderEntityResponse
    uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

type Subscriber {
    createdAt: DateTime
    email: String!
    name: String!
    updatedAt: DateTime
}

type SubscriberEntity {
    attributes: Subscriber
    id: ID
}

type SubscriberEntityResponse {
    data: SubscriberEntity
}

type SubscriberEntityResponseCollection {
    data: [SubscriberEntity!]!
    meta: ResponseCollectionMeta!
}

type Teacher {
    avatar: UploadFileEntityResponse!
    bio: String!
    createdAt: DateTime
    lessons(filters: LessonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): LessonRelationResponseCollection
    name: String!
    updatedAt: DateTime
}

type TeacherEntity {
    attributes: Teacher
    id: ID
}

type TeacherEntityResponse {
    data: TeacherEntity
}

type TeacherEntityResponseCollection {
    data: [TeacherEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntity {
    attributes: UploadFile
    id: ID
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
    data: [UploadFileEntity!]!
}

type UploadFolder {
    children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
    createdAt: DateTime
    files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    name: String!
    parent: UploadFolderEntityResponse
    path: String!
    pathId: Int!
    updatedAt: DateTime
}

type UploadFolderEntity {
    attributes: UploadFolder
    id: ID
}

type UploadFolderEntityResponse {
    data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
    data: [UploadFolderEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
    data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    attributes: UsersPermissionsPermission
    id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
    attributes: UsersPermissionsRole
    id: ID
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    email: String!
    provider: String
    role: UsersPermissionsRoleEntityResponse
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntity {
    attributes: UsersPermissionsUser
    id: ID
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

enum ENUM_LESSON_TYPE {
    Hands_on
    Live
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar LessonVideoDynamicZoneInput

"The `Upload` scalar type represents a file upload."
scalar Upload

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    eqi: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input ChallengeFiltersInput {
    URL: StringFilterInput
    and: [ChallengeFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: ChallengeFiltersInput
    or: [ChallengeFiltersInput]
    updatedAt: DateTimeFilterInput
}

input ChallengeInput {
    URL: String
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input LessonFiltersInput {
    and: [LessonFiltersInput]
    availableAt: DateTimeFilterInput
    challenge: ChallengeFiltersInput
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    not: LessonFiltersInput
    or: [LessonFiltersInput]
    slug: StringFilterInput
    teacher: TeacherFiltersInput
    title: StringFilterInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
}

input LessonInput {
    Video: [LessonVideoDynamicZoneInput!]
    availableAt: DateTime
    challenge: ID
    description: String
    slug: String
    teacher: ID
    title: String
    type: ENUM_LESSON_TYPE
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input SubscriberFiltersInput {
    and: [SubscriberFiltersInput]
    createdAt: DateTimeFilterInput
    email: StringFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: SubscriberFiltersInput
    or: [SubscriberFiltersInput]
    updatedAt: DateTimeFilterInput
}

input SubscriberInput {
    email: String
    name: String
}

input TeacherFiltersInput {
    and: [TeacherFiltersInput]
    bio: StringFilterInput
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    lessons: LessonFiltersInput
    name: StringFilterInput
    not: TeacherFiltersInput
    or: [TeacherFiltersInput]
    updatedAt: DateTimeFilterInput
}

input TeacherInput {
    avatar: ID
    bio: String
    lessons: [ID]
    name: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    ext: StringFilterInput
    folder: UploadFolderFiltersInput
    folderPath: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    id: IDFilterInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UploadFileInput {
    alternativeText: String
    caption: String
    ext: String
    folder: ID
    folderPath: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    size: Float
    url: String
    width: Int
}

input UploadFolderFiltersInput {
    and: [UploadFolderFiltersInput]
    children: UploadFolderFiltersInput
    createdAt: DateTimeFilterInput
    files: UploadFileFiltersInput
    id: IDFilterInput
    name: StringFilterInput
    not: UploadFolderFiltersInput
    or: [UploadFolderFiltersInput]
    parent: UploadFolderFiltersInput
    path: StringFilterInput
    pathId: IntFilterInput
    updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
    children: [ID]
    files: [ID]
    name: String
    parent: ID
    path: String
    pathId: Int
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    id: IDFilterInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    id: IDFilterInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    name: String
    permissions: [ID]
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    email: StringFilterInput
    id: IDFilterInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    username: String
}
